[{"content":"题目 链接：https://ac.nowcoder.com/acm/contest/19850/L 来源：牛客网\nHA实验有一套非常严密的安全保障体系，在HA实验基地的大门，有一个指纹锁。\n该指纹锁的加密算法会把一个指纹转化为一个不超过1e7的数字，两个指纹数值之差越小，就说明两个指纹越相似，当两个指纹的数值差≤k时，这两个指纹的持有者会被系统判定为同一个人。 现在有3种操作，共m个， 操作1：add x，表示为指纹锁录入一个指纹，该指纹对应的数字为x，如果系统内有一个与x相差≤k的指纹，则系统会忽略这次添加操作 操作2：del x，表示删除指纹锁中的指纹x，若指纹锁中多个与x相差≤k的指纹，则全部删除，若指纹锁中没有指纹x，则可以忽略该操作， 操作3：query x，表示有一个持有指纹x的人试图打开指纹锁，你需要设计一个判断程序，返回该人是否可以打开指纹锁（只要x与存入的任何一个指纹相差≤k即可打开锁）。 初始状态，指纹锁中没有任何指纹。\n输入描述:\n1 2 第一行有2个正整数m，k。 接下来m行，每行描述一种操作：add x，del x或query x。 输出描述:\n1 对于每个query操作，输出一行，包含一个单词“Yes”或“No”，表示该人是否可以打开指纹锁。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include \u0026lt;iostream\u0026gt; #include \u0026lt;set\u0026gt; using namespace std; int m,k; struct cmp { bool operator()(const int \u0026amp;a,const int \u0026amp;b) const { if(abs(a-b) \u0026lt;= k) return false; return a \u0026lt; b; } }; int main() { ios::sync_with_stdio(false); cin \u0026gt;\u0026gt; m \u0026gt;\u0026gt; k; set\u0026lt;int,cmp\u0026gt; prin; while(m--) { string op;int x; cin \u0026gt;\u0026gt; op \u0026gt;\u0026gt; x; if(op == \u0026#34;add\u0026#34;) prin.insert(x); else if(op == \u0026#34;del\u0026#34;) prin.erase(x); else if(prin.find(x) != prin.end()) cout \u0026lt;\u0026lt; \u0026#34;Yes\u0026#34; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026#34;No\u0026#34; \u0026lt;\u0026lt; endl; } } 在这个例子中，使用set进行了元素的增删查，其中巧妙的运用了重载运算符完美契合题目的思路\nset 是 C++ 标准库（STL）中的一个关联容器，提供了一种自动排序且不允许重复元素的数据结构。它基于红黑树实现，支持高效的插入、删除和查找操作，时间复杂度约为 O(log n)。\nset 的基本使用 set 主要包含以下功能：\n自动排序（默认升序） 不允许重复元素（可重复者有multiset） 插入、删除、查找操作时间复杂度为 O(log n) 支持范围操作 声明和初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026lt;iostream\u0026gt; #include \u0026lt;set\u0026gt; using namespace std; int main() { set\u0026lt;int\u0026gt; s = {5, 2, 8, 3, 1}; // 自动排序，结果是 {1, 2, 3, 5, 8} // 遍历 set for (int x : s) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 输出: 1 2 3 5 8 } cout \u0026lt;\u0026lt; endl; return 0; } 说明：\nset 内部自动按照从小到大排序（默认按 operator\u0026lt; 排序） 不能存储重复值，如果尝试插入相同元素，会被自动忽略。 set 的常见操作 插入元素 1 2 3 4 5 6 7 8 9 set\u0026lt;int\u0026gt; s; s.insert(10); s.insert(5); s.insert(20); s.insert(10); // 插入相同元素无效 for (int x : s) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 输出: 5 10 20 } insert(x): 插入元素 x，如果已存在，则不会插入。 查找元素 1 2 3 4 5 if (s.find(10) != s.end()) { cout \u0026lt;\u0026lt; \u0026#34;10 存在\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;10 不存在\u0026#34; \u0026lt;\u0026lt; endl; } find(x): 返回迭代器，指向 x 所在位置；如果 x 不存在，返回 s.end()。 删除元素 1 s.erase(10); // 删除 10 erase(x): 删除 x，如果 x 存在，则移除它；否则无操作。 计数 1 cout \u0026lt;\u0026lt; s.count(10); // 0（不存在）或 1（存在） count(x) 只返回 0 或 1，因为 set 不能有重复值。 lower_bound 和 upper_bound 1 2 3 4 5 6 7 set\u0026lt;int\u0026gt; s = {10, 20, 30, 40, 50}; auto it = s.lower_bound(25); // 第一个 \u0026gt;= 25 的元素 cout \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; endl; // 输出 30 it = s.upper_bound(30); // 第一个 \u0026gt; 30 的元素 cout \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; endl; // 输出 40 lower_bound(x): 返回第一个大于等于 x 的元素迭代器。 upper_bound(x): 返回第一个大于 x 的元素迭代器。 equal_range() 1 2 auto [l,r] = s.equal_range(1); cout \u0026lt;\u0026lt; *l \u0026lt;\u0026lt; *r; 表示第一个大于或等于给定关键值的元素和第一个大于给定关键值的迭代器\n返回最大最小值 1 2 cout \u0026lt;\u0026lt; *s.begin(); cout \u0026lt;\u0026lt; *s.rbegin(); 其它 1 2 3 4 5 s.clear() //清空 s.empty() //检查set是否为空 s.begin();s.end(); //set中正向的返回指向开始和结束位置的迭代器 s.rbegin();s.rend(); //set中反向 s.size(); set 的高级用法 自定义排序 默认情况下，set 按升序排列。如果要降序排序，可以使用 greater：\n1 2 3 4 set\u0026lt;int, greater\u0026lt;int\u0026gt;\u0026gt; s = {10, 5, 20, 15}; for (int x : s) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 输出: 20 15 10 5 } 也可以使用自定义比较函数：\n1 2 3 4 5 6 struct cmp { bool operator()(const int \u0026amp;a, const int \u0026amp;b) const { return a \u0026gt; b; // 降序 } }; set\u0026lt;int, cmp\u0026gt; s = {10, 5, 20, 15}; set 维护结构体 如果 set 存储结构体类型，需要定义比较规则：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 struct Student { string name; int score; // 自定义排序规则（按成绩升序） bool operator\u0026lt;(const Student \u0026amp;s) const { return score \u0026lt; s.score; } }; set\u0026lt;Student\u0026gt; s; s.insert({\u0026#34;Alice\u0026#34;, 90}); s.insert({\u0026#34;Bob\u0026#34;, 85}); s.insert({\u0026#34;Charlie\u0026#34;, 95}); for (auto x : s) { cout \u0026lt;\u0026lt; x.name \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; x.score \u0026lt;\u0026lt; endl; } 需要定义 operator\u0026lt;，否则 set 无法自动排序。 unordered_set 如果不需要排序，可以使用 unordered_set，它基于哈希表，插入、删除、查找的时间复杂度为 O(1)：\n1 2 #include \u0026lt;unordered_set\u0026gt; unordered_set\u0026lt;int\u0026gt; us = {10, 5, 20, 15}; 但 unordered_set 无法使用 lower_bound、upper_bound。\n但同样支持insert erase find count empty size clear\nmultiset（允许重复元素） 如果需要存储重复元素，可以使用 multiset：\n1 2 3 4 5 multiset\u0026lt;int\u0026gt; ms = {10, 5, 10, 20, 5}; for (int x : ms) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 输出: 5 5 10 10 20 } multiset.erase(10) 会删除 所有 10； 如果只想删除一个 10，可以用 ms.erase(ms.find(10))。 其余函数和set基本相同 总结 操作 set unordered_set multiset 排序 自动排序 无序 自动排序 允许重复 ❌ ❌ ✅ 插入删除查找 O(log n) O(1) O(log n) 适用场景 需要排序 只需快速查找 需要排序且允许重复 ","date":"2025-02-11T00:00:00Z","permalink":"https://anybaker.github.io/p/stl-set/","title":"STL-Set的使用"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n","date":"2024-12-31T00:00:00Z","image":"https://anybaker.github.io/p/test-chinese/justuse_hu_8cab87cc3ebe82cc.jpg","permalink":"https://anybaker.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://anybaker.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://anybaker.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://anybaker.github.io/p/math-typesetting/","title":"Math Typesetting"}]